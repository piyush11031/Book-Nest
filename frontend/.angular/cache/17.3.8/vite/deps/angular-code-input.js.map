{
  "version": 3,
  "sources": ["../../../../../node_modules/angular-code-input/fesm2022/angular-code-input.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"input\"];\nfunction CodeInputComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\")(1, \"input\", 2, 0);\n    i0.ɵɵlistener(\"click\", function CodeInputComponent_span_0_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onClick($event));\n    })(\"paste\", function CodeInputComponent_span_0_Template_input_paste_1_listener($event) {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onPaste($event, i_r3));\n    })(\"input\", function CodeInputComponent_span_0_Template_input_input_1_listener($event) {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onInput($event, i_r3));\n    })(\"keydown\", function CodeInputComponent_span_0_Template_input_keydown_1_listener($event) {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onKeydown($event, i_r3));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"code-hidden\", ctx_r1.isCodeHidden);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"type\", ctx_r1.inputType)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵattribute(\"inputmode\", ctx_r1.inputMode)(\"autocapitalize\", ctx_r1.autocapitalize);\n  }\n}\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\nconst defaultComponentConfig = {\n  codeLength: 4,\n  inputType: 'tel',\n  inputMode: 'numeric',\n  initialFocusField: undefined,\n  isCharsCode: false,\n  isCodeHidden: false,\n  isPrevFocusableAfterClearing: true,\n  isFocusingOnLastByClickIfFilled: false,\n  code: undefined,\n  disabled: false,\n  autocapitalize: undefined\n};\nvar InputState;\n(function (InputState) {\n  InputState[InputState[\"ready\"] = 0] = \"ready\";\n  InputState[InputState[\"reset\"] = 1] = \"reset\";\n})(InputState || (InputState = {}));\nclass CodeInputComponent {\n  constructor(config) {\n    /** @deprecated Use isCharsCode prop instead. */\n    this.isNonDigitsCode = false;\n    this.codeChanged = new EventEmitter();\n    this.codeCompleted = new EventEmitter();\n    this.placeholders = [];\n    this.inputs = [];\n    this.inputsStates = [];\n    this.state = {\n      isFocusingAfterAppearingCompleted: false,\n      isInitialFocusFieldEnabled: false\n    };\n    Object.assign(this, defaultComponentConfig);\n    if (!config) {\n      return;\n    }\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n  /**\n   * Life cycle\n   */\n  ngOnInit() {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n  ngAfterViewInit() {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n  ngAfterViewChecked() {\n    this.focusOnInputAfterAppearing();\n  }\n  ngOnChanges(changes) {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n  ngOnDestroy() {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n  /**\n   * Methods\n   */\n  reset(isChangesEmitting = false) {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField);\n    }\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n  focusOnField(index) {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n    this.inputs[index].focus();\n  }\n  onClick(e) {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n  onInput(e, i) {\n    const target = e.target;\n    const value = e.data || target.value;\n    if (this.isEmpty(value)) {\n      return;\n    }\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n    this.inputs[next].focus();\n  }\n  onPaste(e, i) {\n    e.preventDefault();\n    e.stopPropagation();\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n    if (this.isEmpty(data)) {\n      return;\n    }\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data.split('');\n    let valIndex = 0;\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n      const input = this.inputs[j];\n      const val = values[valIndex];\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n  async onKeydown(e, i) {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n    // processing only the backspace and delete key events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    const isDeleteKey = this.isDeleteKey(e);\n    if (!isBackspaceKey && !isDeleteKey) {\n      return;\n    }\n    e.preventDefault();\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n    // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n    if (prev < 0 || isDeleteKey) {\n      return;\n    }\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n  onInputCodeChanges() {\n    if (!this.inputs.length) {\n      return;\n    }\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach(input => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n    this.inputs.forEach((input, index) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n  onCodeLengthChanges() {\n    if (!this.codeLength) {\n      return;\n    }\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    } else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n  onInputsListChanges(list) {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    } else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n  focusOnInputAfterAppearing() {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\n  }\n  emitChanges() {\n    setTimeout(() => this.emitCode(), 50);\n  }\n  emitCode() {\n    const code = this.getCurrentFilledCode();\n    this.codeChanged.emit(code);\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n  getCurrentFilledCode() {\n    let code = '';\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n    return code;\n  }\n  isBackspaceKey(e) {\n    const isBackspace = e.key && e.key.toLowerCase() === 'backspace' || e.keyCode && e.keyCode === 8;\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n  isDeleteKey(e) {\n    return e.key && e.key.toLowerCase() === 'delete' || e.keyCode && e.keyCode === 46;\n  }\n  setInputValue(input, value) {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.add(emptyClassCSS);\n    } else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.remove(emptyClassCSS);\n    }\n  }\n  canInputValue(value) {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || this.isCharsCode || this.isNonDigitsCode;\n  }\n  setStateForInput(input, state) {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n    this.inputsStates[index] = state;\n  }\n  getStateForInput(input) {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n  isEmpty(value) {\n    return value === null || value === undefined || !value.toString().length;\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function CodeInputComponent_Factory(t) {\n      return new (t || CodeInputComponent)(i0.ɵɵdirectiveInject(CodeInputComponentConfigToken, 8));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CodeInputComponent,\n      selectors: [[\"code-input\"]],\n      viewQuery: function CodeInputComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsList = _t);\n        }\n      },\n      inputs: {\n        codeLength: \"codeLength\",\n        inputType: \"inputType\",\n        inputMode: \"inputMode\",\n        initialFocusField: \"initialFocusField\",\n        isNonDigitsCode: \"isNonDigitsCode\",\n        isCharsCode: \"isCharsCode\",\n        isCodeHidden: \"isCodeHidden\",\n        isPrevFocusableAfterClearing: \"isPrevFocusableAfterClearing\",\n        isFocusingOnLastByClickIfFilled: \"isFocusingOnLastByClickIfFilled\",\n        code: \"code\",\n        disabled: \"disabled\",\n        autocapitalize: \"autocapitalize\"\n      },\n      outputs: {\n        codeChanged: \"codeChanged\",\n        codeCompleted: \"codeCompleted\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 1,\n      vars: 1,\n      consts: [[\"input\", \"\"], [3, \"code-hidden\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"click\", \"paste\", \"input\", \"keydown\", \"type\", \"disabled\"]],\n      template: function CodeInputComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, CodeInputComponent_span_0_Template, 3, 6, \"span\", 1);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngForOf\", ctx.placeholders);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\"[_nghost-%COMP%]{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]{display:block;flex:1;padding-right:var(--item-spacing)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]:first-child{padding-left:var(--item-spacing)}[_nghost-%COMP%]   span.code-hidden[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}[_nghost-%COMP%]   input.has-value[_ngcontent-%COMP%]{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'code-input',\n      template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.inputmode]=\\\"inputMode\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\",\n      styles: [\":host{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CodeInputComponentConfigToken]\n      }]\n    }];\n  }, {\n    inputsList: [{\n      type: ViewChildren,\n      args: ['input']\n    }],\n    codeLength: [{\n      type: Input\n    }],\n    inputType: [{\n      type: Input\n    }],\n    inputMode: [{\n      type: Input\n    }],\n    initialFocusField: [{\n      type: Input\n    }],\n    isNonDigitsCode: [{\n      type: Input\n    }],\n    isCharsCode: [{\n      type: Input\n    }],\n    isCodeHidden: [{\n      type: Input\n    }],\n    isPrevFocusableAfterClearing: [{\n      type: Input\n    }],\n    isFocusingOnLastByClickIfFilled: [{\n      type: Input\n    }],\n    code: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    autocapitalize: [{\n      type: Input\n    }],\n    codeChanged: [{\n      type: Output\n    }],\n    codeCompleted: [{\n      type: Output\n    }]\n  });\n})();\nclass CodeInputModule {\n  static forRoot(config) {\n    return {\n      ngModule: CodeInputModule,\n      providers: [{\n        provide: CodeInputComponentConfigToken,\n        useValue: config\n      }]\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function CodeInputModule_Factory(t) {\n      return new (t || CodeInputModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CodeInputModule,\n      declarations: [CodeInputComponent],\n      imports: [CommonModule],\n      exports: [CodeInputComponent]\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CodeInputComponent],\n      exports: [CodeInputComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of code-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodeInputComponent, CodeInputComponentConfigToken, CodeInputModule, defaultComponentConfig };\n"],
  "mappings": "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",
  "names": ["InputState"]
}
